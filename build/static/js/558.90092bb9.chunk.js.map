{"version":3,"file":"static/js/558.90092bb9.chunk.js","mappings":"wKAEaA,EAAc,WACzB,IAAMC,GAAeC,EAAAA,EAAAA,QAAO,MAC5B,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAqB,SAACC,GAC1B,IAAOC,GAAP,OAAgBD,EAAhB,MACAF,EAAaG,EAAMC,gBACnBC,QAAQC,IAAIH,EACb,EAEKI,EAAU,CAAEC,KAAM,KAAMC,WAAY,MAAOC,UAAW,IAW5D,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,IAAIC,qBAAqBZ,EAAoBM,GAG9D,OAFIX,EAAakB,SAASF,EAASG,QAAQnB,EAAakB,SAEjD,WACDlB,EAAakB,SAASF,EAASI,UAAUpB,EAAakB,QAC3D,CACF,GAAE,CAAClB,EAAcW,IAEX,CAAEX,aAAAA,EAAcG,UAAAA,EACxB,C,kGCpBKkB,EAASC,EAAAA,MAAW,kBAAM,qCAAN,IACpBC,EAASD,EAAAA,MAAW,kBAAM,qCAAN,IACpBE,EAAWF,EAAAA,MAAW,kBAAM,4BAAN,IACtBG,EAAUH,EAAAA,MAAW,kBAAM,4BAAN,IACrBI,EAAOJ,EAAAA,MAAW,kBAAM,qCAAN,IAiDxB,EA/Ca,SAAC,GAMP,IALLK,EAKI,EALJA,KACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,mBACAC,EAEI,EAFJA,mBACAC,EACI,EADJA,eAEA,GAAoChC,EAAAA,EAAAA,KAA5BC,EAAR,EAAQA,aAAcG,EAAtB,EAAsBA,UACtB,OACE,kBAAM6B,UAAU,OAAhB,WACE,SAACX,EAAD,CAAQO,UAAWA,KACnB,iBACEI,UAAS,iDACP7B,EAAY,cAAgB,IAE9B8B,IAAKjC,EAJP,UAMG2B,EAAKO,OAAS,GACb,gBAAKC,KAAK,OAAOH,UAAU,aAA3B,SACGL,EAAKS,KAAI,SAACC,EAAMC,GAAP,OACR,SAACd,EAAD,CACEe,IAAKF,EAAKE,IACVC,MAAOH,EAAKG,MACZC,KAAMJ,EAAKI,KACXC,MAAOL,EAAKK,MACZC,YAAaN,EAAKO,UAClBC,GAAIR,EAAKQ,GACTC,oBAAqBhB,EACrBiB,oBAAqBlB,EACrBmB,qBAAsBjB,GATxB,oBAUoBO,GAXZ,OAgBZ,gBAAKH,KAAK,OAAOH,UAAU,aAA3B,UACE,SAACN,EAAD,CAAMM,UAAU,cAAciB,IAAI,KAAKR,KAAK,2BAIhD,SAAChB,EAAD,CAASE,KAAMA,QAEjB,SAACJ,EAAD,MAGL,C","sources":["app/hooks.js","pages/cart/Cart.js"],"sourcesContent":["import { useRef, useState, useEffect } from 'react';\n\nexport const useObserver = () => {\n  const containerRef = useRef(null);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const handleIntersection = (entries) => {\n    const [entry] = entries;\n    setIsVisible(entry.isIntersecting);\n    console.log(entry);\n  };\n\n  const options = { root: null, rootMargin: '0px', threshold: 0.1 };\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(handleIntersection, options);\n    if (containerRef.current) observer.observe(containerRef.current);\n\n    return () => {\n      if (containerRef.current) observer.unobserve(containerRef.current);\n    };\n  }, [containerRef, options]);\n\n  return { containerRef, isVisible };\n};\n","import React from 'react';\nimport { useObserver } from '../../app/hooks';\nimport '../../assets/styles/cart/Cart.css';\n\nconst Header = React.lazy(() => import('../../sections/header/Header'));\nconst Footer = React.lazy(() => import('../../sections/footer/Footer'));\nconst CartItem = React.lazy(() => import('./components/CartItem'));\nconst Summary = React.lazy(() => import('./components/Summary'));\nconst Text = React.lazy(() => import('../../components/Text'));\n\nconst Cart = ({\n  cart,\n  cartCount,\n  decrementItemCount,\n  incrementItemCount,\n  deleteCartItem,\n}) => {\n  const { containerRef, isVisible } = useObserver();\n  return (\n    <main className=\"cart\">\n      <Header cartCount={cartCount} />\n      <div\n        className={`content cart__content enter-transition ${\n          isVisible ? 'in-viewport' : ''\n        }`}\n        ref={containerRef}\n      >\n        {cart.length > 0 ? (\n          <div role=\"list\" className=\"cart__list\">\n            {cart.map((item, index) => (\n              <CartItem\n                img={item.img}\n                count={item.count}\n                text={item.text}\n                price={item.price}\n                description={item.shortdesc}\n                id={item.id}\n                handleItemIncrement={incrementItemCount}\n                handleItemDecrement={decrementItemCount}\n                handleCartItemDelete={deleteCartItem}\n                key={`cart-item-${index}`}\n              />\n            ))}\n          </div>\n        ) : (\n          <div role=\"list\" className=\"cart__list\">\n            <Text className=\"cart__error\" tag=\"h2\" text=\"Your cart is empty!\" />\n          </div>\n        )}\n\n        <Summary cart={cart} />\n      </div>\n      <Footer />\n    </main>\n  );\n};\n\nexport default Cart;\n"],"names":["useObserver","containerRef","useRef","useState","isVisible","setIsVisible","handleIntersection","entries","entry","isIntersecting","console","log","options","root","rootMargin","threshold","useEffect","observer","IntersectionObserver","current","observe","unobserve","Header","React","Footer","CartItem","Summary","Text","cart","cartCount","decrementItemCount","incrementItemCount","deleteCartItem","className","ref","length","role","map","item","index","img","count","text","price","description","shortdesc","id","handleItemIncrement","handleItemDecrement","handleCartItemDelete","tag"],"sourceRoot":""}